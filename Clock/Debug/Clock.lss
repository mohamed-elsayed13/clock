
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000079e  00000832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800094  00800094  00000866  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2f  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ef  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000953  00000000  00000000  000020de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dc  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042d  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_1>
   8:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cd 03 	jmp	0x79a	; 0x79a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8_t sec  ;
uint8_t counter=0;
uint8_t state=1;
int main(void)
{	
    CLRBIT(SREG,7);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	8f bf       	out	0x3f, r24	; 63
	LCD_init();
  98:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_init>
	LCD_write_command(0x01);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
	LCD_write_string("2 reset time use");
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	99 e6       	ldi	r25, 0x69	; 105
  ae:	a8 e1       	ldi	r26, 0x18	; 24
  b0:	81 50       	subi	r24, 0x01	; 1
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	a0 40       	sbci	r26, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x28>
  ba:	00 00       	nop
	_delay_ms(500);
	LCD_write_command(0x01);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
	LCD_write_string("PD2 & PD3 & PD4");
  c2:	81 e7       	ldi	r24, 0x71	; 113
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_write_string>
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	99 e6       	ldi	r25, 0x69	; 105
  ce:	a8 e1       	ldi	r26, 0x18	; 24
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	a0 40       	sbci	r26, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x48>
  da:	00 00       	nop
	_delay_ms(500);
	CLRBIT(DDRD,2);
  dc:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
  de:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
  e0:	8c 98       	cbi	0x11, 4	; 17
	SETBIT(MCUCR,ISC00);
  e2:	85 b7       	in	r24, 0x35	; 53
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	85 bf       	out	0x35, r24	; 53
	SETBIT(MCUCR,ISC01);
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	85 bf       	out	0x35, r24	; 53
	SETBIT(GICR,INT0);
  ee:	8b b7       	in	r24, 0x3b	; 59
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	8b bf       	out	0x3b, r24	; 59
	SETBIT(MCUCR,ISC10);
  f4:	85 b7       	in	r24, 0x35	; 53
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	85 bf       	out	0x35, r24	; 53
	SETBIT(MCUCR,ISC11);
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	85 bf       	out	0x35, r24	; 53
	SETBIT(GICR,INT1);
 100:	8b b7       	in	r24, 0x3b	; 59
 102:	80 68       	ori	r24, 0x80	; 128
 104:	8b bf       	out	0x3b, r24	; 59
	sei();
 106:	78 94       	sei
	sec  =EEPROM_read(6);
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 1b 02 	call	0x436	; 0x436 <EEPROM_read>
 110:	80 93 99 00 	sts	0x0099, r24
    min  =EEPROM_read(7);
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 1b 02 	call	0x436	; 0x436 <EEPROM_read>
 11c:	80 93 98 00 	sts	0x0098, r24
    hour =EEPROM_read(8);
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 1b 02 	call	0x436	; 0x436 <EEPROM_read>
 128:	80 93 97 00 	sts	0x0097, r24
	timer_normal_init();
 12c:	0e 94 9b 03 	call	0x736	; 0x736 <timer_normal_init>
	
	while(1)
    {
	
	while((GETBIT(PIND,4)==1)){}
 130:	80 b3       	in	r24, 0x10	; 16
 132:	84 fd       	sbrc	r24, 4
 134:	fd cf       	rjmp	.-6      	; 0x130 <main+0x9e>
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	99 e6       	ldi	r25, 0x69	; 105
 13a:	a8 e1       	ldi	r26, 0x18	; 24
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	a0 40       	sbci	r26, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xaa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xb4>
 146:	00 00       	nop
	_delay_ms(500);
	counter++;
 148:	80 91 94 00 	lds	r24, 0x0094
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 94 00 	sts	0x0094, r24
		}
 152:	ee cf       	rjmp	.-36     	; 0x130 <main+0x9e>

00000154 <__vector_11>:
	
    }

ISR(TIMER0_OVF_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
static uint16_t count = 0;

count++;
 176:	80 91 95 00 	lds	r24, 0x0095
 17a:	90 91 96 00 	lds	r25, 0x0096
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	90 93 96 00 	sts	0x0096, r25
 184:	80 93 95 00 	sts	0x0095, r24
	
if (count ==62){
 188:	8e 33       	cpi	r24, 0x3E	; 62
 18a:	91 05       	cpc	r25, r1
 18c:	09 f0       	breq	.+2      	; 0x190 <__vector_11+0x3c>
 18e:	70 c0       	rjmp	.+224    	; 0x270 <__vector_11+0x11c>
	
	sec++;
 190:	80 91 99 00 	lds	r24, 0x0099
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 99 00 	sts	0x0099, r24
	if (sec>=60){
 19a:	8c 33       	cpi	r24, 0x3C	; 60
 19c:	f0 f0       	brcs	.+60     	; 0x1da <__vector_11+0x86>
		sec=0 ;
 19e:	10 92 99 00 	sts	0x0099, r1
		min ++ ;
 1a2:	80 91 98 00 	lds	r24, 0x0098
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 98 00 	sts	0x0098, r24
		if (min>=60){
 1ac:	8c 33       	cpi	r24, 0x3C	; 60
 1ae:	a8 f0       	brcs	.+42     	; 0x1da <__vector_11+0x86>
			min=0;
 1b0:	10 92 98 00 	sts	0x0098, r1
			hour++;
 1b4:	80 91 97 00 	lds	r24, 0x0097
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 97 00 	sts	0x0097, r24
			if (hour==12){TOGBIT(state,0);}
 1be:	8c 30       	cpi	r24, 0x0C	; 12
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <__vector_11+0x7c>
 1c2:	90 91 92 00 	lds	r25, 0x0092
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	89 27       	eor	r24, r25
 1ca:	80 93 92 00 	sts	0x0092, r24
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <__vector_11+0x86>
			if(hour >=13){
 1d0:	8d 30       	cpi	r24, 0x0D	; 13
 1d2:	18 f0       	brcs	.+6      	; 0x1da <__vector_11+0x86>
				hour=1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 97 00 	sts	0x0097, r24
					}
		}
		}
	EEPROM_write(6,sec);
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	60 91 99 00 	lds	r22, 0x0099
 1e2:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
	EEPROM_write(7,min);
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	60 91 98 00 	lds	r22, 0x0098
 1ee:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
	EEPROM_write(8,hour);	
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	60 91 97 00 	lds	r22, 0x0097
 1fa:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
	count=0;
 1fe:	10 92 96 00 	sts	0x0096, r1
 202:	10 92 95 00 	sts	0x0095, r1
	LCD_write_command(0x01);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
	LCD_write_command(0x84);
 20c:	84 e8       	ldi	r24, 0x84	; 132
 20e:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
	LCD_write_string("My Clock");
 212:	81 e8       	ldi	r24, 0x81	; 129
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_write_string>
	LCD_write_command(0xc3);
 21a:	83 ec       	ldi	r24, 0xC3	; 195
 21c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
	LCD_write_num(hour);
 220:	60 91 97 00 	lds	r22, 0x0097
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_num>
	LCD_write_char(':');
 22e:	8a e3       	ldi	r24, 0x3A	; 58
 230:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_write_char>
	LCD_write_num(min);
 234:	60 91 98 00 	lds	r22, 0x0098
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_num>
	LCD_write_char(':');
 242:	8a e3       	ldi	r24, 0x3A	; 58
 244:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_write_char>
	LCD_write_num(sec);
 248:	60 91 99 00 	lds	r22, 0x0099
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 30 03 	call	0x660	; 0x660 <LCD_write_num>
	if(state==1){LCD_write_string(" AM");}
 256:	80 91 92 00 	lds	r24, 0x0092
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	29 f4       	brne	.+10     	; 0x268 <__vector_11+0x114>
 25e:	8a e8       	ldi	r24, 0x8A	; 138
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_write_string>
 266:	04 c0       	rjmp	.+8      	; 0x270 <__vector_11+0x11c>
	else {LCD_write_string(" PM");}	
 268:	8e e8       	ldi	r24, 0x8E	; 142
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_write_string>
}

}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_1>:
ISR(INT0_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
if (counter==0){
 2b4:	80 91 94 00 	lds	r24, 0x0094
 2b8:	88 23       	and	r24, r24
 2ba:	81 f4       	brne	.+32     	; 0x2dc <__vector_1+0x4a>
	sec++;
 2bc:	80 91 99 00 	lds	r24, 0x0099
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 99 00 	sts	0x0099, r24
	if (sec>=60){
 2c6:	8c 33       	cpi	r24, 0x3C	; 60
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <__vector_1+0x3c>
		sec=0 ;
 2ca:	10 92 99 00 	sts	0x0099, r1
			}
	EEPROM_write(6,sec);		
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	60 91 99 00 	lds	r22, 0x0099
 2d6:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
 2da:	32 c0       	rjmp	.+100    	; 0x340 <__vector_1+0xae>
	}
else if (counter==1){
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	81 f4       	brne	.+32     	; 0x300 <__vector_1+0x6e>
	min++;
 2e0:	80 91 98 00 	lds	r24, 0x0098
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 98 00 	sts	0x0098, r24
	if (min>=60){
 2ea:	8c 33       	cpi	r24, 0x3C	; 60
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <__vector_1+0x60>
		min=0;
 2ee:	10 92 98 00 	sts	0x0098, r1
			}
	EEPROM_write(7,min);		
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	60 91 98 00 	lds	r22, 0x0098
 2fa:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
 2fe:	20 c0       	rjmp	.+64     	; 0x340 <__vector_1+0xae>
	}
else if (counter==2){
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	89 f4       	brne	.+34     	; 0x326 <__vector_1+0x94>
	hour++;
 304:	80 91 97 00 	lds	r24, 0x0097
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 97 00 	sts	0x0097, r24
	if(hour ==13){
 30e:	8d 30       	cpi	r24, 0x0D	; 13
 310:	19 f4       	brne	.+6      	; 0x318 <__vector_1+0x86>
		hour=1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 97 00 	sts	0x0097, r24
	}
	EEPROM_write(8,hour);
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	60 91 97 00 	lds	r22, 0x0097
 320:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
 324:	0d c0       	rjmp	.+26     	; 0x340 <__vector_1+0xae>
}
else if (counter==3){TOGBIT(state,0);}
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	39 f4       	brne	.+14     	; 0x338 <__vector_1+0xa6>
 32a:	90 91 92 00 	lds	r25, 0x0092
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	89 27       	eor	r24, r25
 332:	80 93 92 00 	sts	0x0092, r24
 336:	04 c0       	rjmp	.+8      	; 0x340 <__vector_1+0xae>
	else if (counter>3){counter=0;}
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	10 f0       	brcs	.+4      	; 0x340 <__vector_1+0xae>
 33c:	10 92 94 00 	sts	0x0094, r1
	}		
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_2>:
ISR(INT1_vect){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	if (counter==0){
 384:	80 91 94 00 	lds	r24, 0x0094
 388:	88 23       	and	r24, r24
 38a:	89 f4       	brne	.+34     	; 0x3ae <__vector_2+0x4c>
		sec--;
 38c:	80 91 99 00 	lds	r24, 0x0099
 390:	81 50       	subi	r24, 0x01	; 1
 392:	80 93 99 00 	sts	0x0099, r24
		if (sec<=0){
 396:	88 23       	and	r24, r24
 398:	19 f4       	brne	.+6      	; 0x3a0 <__vector_2+0x3e>
		sec=59;}
 39a:	8b e3       	ldi	r24, 0x3B	; 59
 39c:	80 93 99 00 	sts	0x0099, r24
		EEPROM_write(6,sec);
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	60 91 99 00 	lds	r22, 0x0099
 3a8:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
 3ac:	33 c0       	rjmp	.+102    	; 0x414 <__vector_2+0xb2>
	}
	else if (counter==1){
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	89 f4       	brne	.+34     	; 0x3d4 <__vector_2+0x72>
		min--;
 3b2:	80 91 98 00 	lds	r24, 0x0098
 3b6:	81 50       	subi	r24, 0x01	; 1
 3b8:	80 93 98 00 	sts	0x0098, r24
		if (min<=0){
 3bc:	88 23       	and	r24, r24
 3be:	19 f4       	brne	.+6      	; 0x3c6 <__vector_2+0x64>
			min=59;}
 3c0:	8b e3       	ldi	r24, 0x3B	; 59
 3c2:	80 93 98 00 	sts	0x0098, r24
		EEPROM_write(7,min);	
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	60 91 98 00 	lds	r22, 0x0098
 3ce:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
 3d2:	20 c0       	rjmp	.+64     	; 0x414 <__vector_2+0xb2>
	}
	else if (counter==2){
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	89 f4       	brne	.+34     	; 0x3fa <__vector_2+0x98>
		hour--;
 3d8:	80 91 97 00 	lds	r24, 0x0097
 3dc:	81 50       	subi	r24, 0x01	; 1
 3de:	80 93 97 00 	sts	0x0097, r24
		if(hour<1){    
 3e2:	88 23       	and	r24, r24
 3e4:	19 f4       	brne	.+6      	; 0x3ec <__vector_2+0x8a>
			hour=12;
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	80 93 97 00 	sts	0x0097, r24
		 }
		EEPROM_write(8,hour);
 3ec:	88 e0       	ldi	r24, 0x08	; 8
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	60 91 97 00 	lds	r22, 0x0097
 3f4:	0e 94 23 02 	call	0x446	; 0x446 <EEPROM_write>
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__vector_2+0xb2>
	}
else if (counter==3){TOGBIT(state,0);}
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	39 f4       	brne	.+14     	; 0x40c <__vector_2+0xaa>
 3fe:	90 91 92 00 	lds	r25, 0x0092
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	89 27       	eor	r24, r25
 406:	80 93 92 00 	sts	0x0092, r24
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__vector_2+0xb2>
	else if (counter>3){counter=0;}
 40c:	84 30       	cpi	r24, 0x04	; 4
 40e:	10 f0       	brcs	.+4      	; 0x414 <__vector_2+0xb2>
 410:	10 92 94 00 	sts	0x0094, r1
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <EEPROM_read>:
 *  Author: M
 */ 
#include "EEPROM.h"

uint8_t EEPROM_read(uint16_t add){
	while(GETBIT(EECR,EEWE)==1){};
 436:	2c b3       	in	r18, 0x1c	; 28
 438:	21 fd       	sbrc	r18, 1
 43a:	fd cf       	rjmp	.-6      	; 0x436 <EEPROM_read>
		EEAR =add;
 43c:	9f bb       	out	0x1f, r25	; 31
 43e:	8e bb       	out	0x1e, r24	; 30
		SETBIT(EECR,EERE);
 440:	e0 9a       	sbi	0x1c, 0	; 28
		return EEDR;
 442:	8d b3       	in	r24, 0x1d	; 29
}
 444:	08 95       	ret

00000446 <EEPROM_write>:
void EEPROM_write(uint16_t add , uint8_t data){ 
	while(GETBIT(EECR,EEWE)==1){};
 446:	2c b3       	in	r18, 0x1c	; 28
 448:	21 fd       	sbrc	r18, 1
 44a:	fd cf       	rjmp	.-6      	; 0x446 <EEPROM_write>
    EEAR =add;
 44c:	9f bb       	out	0x1f, r25	; 31
 44e:	8e bb       	out	0x1e, r24	; 30
	EEDR =data;
 450:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
 452:	e2 9a       	sbi	0x1c, 2	; 28
	SETBIT(EECR,EEWE);
 454:	e1 9a       	sbi	0x1c, 1	; 28
}
 456:	08 95       	ret

00000458 <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
 458:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
 45a:	98 2f       	mov	r25, r24
 45c:	92 95       	swap	r25
 45e:	9f 70       	andi	r25, 0x0F	; 15
 460:	90 ff       	sbrs	r25, 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <LCD_write_command+0x10>
 464:	db 9a       	sbi	0x1b, 3	; 27
 466:	01 c0       	rjmp	.+2      	; 0x46a <LCD_write_command+0x12>
 468:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
 46a:	98 2f       	mov	r25, r24
 46c:	92 95       	swap	r25
 46e:	96 95       	lsr	r25
 470:	97 70       	andi	r25, 0x07	; 7
 472:	90 ff       	sbrs	r25, 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <LCD_write_command+0x22>
 476:	dc 9a       	sbi	0x1b, 4	; 27
 478:	01 c0       	rjmp	.+2      	; 0x47c <LCD_write_command+0x24>
 47a:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
 47c:	98 2f       	mov	r25, r24
 47e:	92 95       	swap	r25
 480:	96 95       	lsr	r25
 482:	96 95       	lsr	r25
 484:	93 70       	andi	r25, 0x03	; 3
 486:	90 ff       	sbrs	r25, 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <LCD_write_command+0x36>
 48a:	dd 9a       	sbi	0x1b, 5	; 27
 48c:	01 c0       	rjmp	.+2      	; 0x490 <LCD_write_command+0x38>
 48e:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
 490:	88 23       	and	r24, r24
 492:	14 f4       	brge	.+4      	; 0x498 <LCD_write_command+0x40>
 494:	de 9a       	sbi	0x1b, 6	; 27
 496:	01 c0       	rjmp	.+2      	; 0x49a <LCD_write_command+0x42>
 498:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 49a:	da 9a       	sbi	0x1b, 2	; 27
 49c:	ef e9       	ldi	r30, 0x9F	; 159
 49e:	ff e0       	ldi	r31, 0x0F	; 15
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_write_command+0x48>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_write_command+0x4e>
 4a6:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 4a8:	da 98       	cbi	0x1b, 2	; 27
 4aa:	ef e9       	ldi	r30, 0x9F	; 159
 4ac:	ff e0       	ldi	r31, 0x0F	; 15
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_write_command+0x56>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_write_command+0x5c>
 4b4:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 4b6:	80 ff       	sbrs	r24, 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <LCD_write_command+0x66>
 4ba:	db 9a       	sbi	0x1b, 3	; 27
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <LCD_write_command+0x68>
 4be:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 4c0:	98 2f       	mov	r25, r24
 4c2:	96 95       	lsr	r25
 4c4:	90 ff       	sbrs	r25, 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <LCD_write_command+0x74>
 4c8:	dc 9a       	sbi	0x1b, 4	; 27
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <LCD_write_command+0x76>
 4cc:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 4ce:	98 2f       	mov	r25, r24
 4d0:	96 95       	lsr	r25
 4d2:	96 95       	lsr	r25
 4d4:	90 ff       	sbrs	r25, 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <LCD_write_command+0x84>
 4d8:	dd 9a       	sbi	0x1b, 5	; 27
 4da:	01 c0       	rjmp	.+2      	; 0x4de <LCD_write_command+0x86>
 4dc:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 4de:	86 95       	lsr	r24
 4e0:	86 95       	lsr	r24
 4e2:	86 95       	lsr	r24
 4e4:	80 ff       	sbrs	r24, 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <LCD_write_command+0x94>
 4e8:	de 9a       	sbi	0x1b, 6	; 27
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <LCD_write_command+0x96>
 4ec:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 4ee:	da 9a       	sbi	0x1b, 2	; 27
 4f0:	8f e9       	ldi	r24, 0x9F	; 159
 4f2:	9f e0       	ldi	r25, 0x0F	; 15
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_write_command+0x9c>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_write_command+0xa2>
 4fa:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 4fc:	da 98       	cbi	0x1b, 2	; 27
 4fe:	ef e9       	ldi	r30, 0x9F	; 159
 500:	ff e0       	ldi	r31, 0x0F	; 15
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <LCD_write_command+0xaa>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCD_write_command+0xb0>
 508:	00 00       	nop
	 _delay_ms(1);
}
 50a:	08 95       	ret

0000050c <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 50c:	8a b3       	in	r24, 0x1a	; 26
 50e:	8e 67       	ori	r24, 0x7E	; 126
 510:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
 518:	8f e7       	ldi	r24, 0x7F	; 127
 51a:	9e e3       	ldi	r25, 0x3E	; 62
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_init+0x10>
 520:	00 c0       	rjmp	.+0      	; 0x522 <LCD_init+0x16>
 522:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
 52a:	af e7       	ldi	r26, 0x7F	; 127
 52c:	be e3       	ldi	r27, 0x3E	; 62
 52e:	11 97       	sbiw	r26, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_init+0x22>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_init+0x28>
 534:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
 53c:	8f e7       	ldi	r24, 0x7F	; 127
 53e:	9e e3       	ldi	r25, 0x3E	; 62
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_init+0x34>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_init+0x3a>
 546:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
LCD_write_command(0X28);
 54e:	88 e2       	ldi	r24, 0x28	; 40
 550:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
LCD_write_command(0X08);
 554:	88 e0       	ldi	r24, 0x08	; 8
 556:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
LCD_write_command(0X01);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
LCD_write_command(0X06);
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	99 ef       	ldi	r25, 0xF9	; 249
 56a:	a0 e0       	ldi	r26, 0x00	; 0
 56c:	81 50       	subi	r24, 0x01	; 1
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	a0 40       	sbci	r26, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <LCD_init+0x60>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LCD_init+0x6a>
 576:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_write_command>
}
 57e:	08 95       	ret

00000580 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 580:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 582:	98 2f       	mov	r25, r24
 584:	92 95       	swap	r25
 586:	9f 70       	andi	r25, 0x0F	; 15
 588:	90 ff       	sbrs	r25, 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <LCD_write_char+0x10>
 58c:	db 9a       	sbi	0x1b, 3	; 27
 58e:	01 c0       	rjmp	.+2      	; 0x592 <LCD_write_char+0x12>
 590:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 592:	98 2f       	mov	r25, r24
 594:	92 95       	swap	r25
 596:	96 95       	lsr	r25
 598:	97 70       	andi	r25, 0x07	; 7
 59a:	90 ff       	sbrs	r25, 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <LCD_write_char+0x22>
 59e:	dc 9a       	sbi	0x1b, 4	; 27
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <LCD_write_char+0x24>
 5a2:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 5a4:	98 2f       	mov	r25, r24
 5a6:	92 95       	swap	r25
 5a8:	96 95       	lsr	r25
 5aa:	96 95       	lsr	r25
 5ac:	93 70       	andi	r25, 0x03	; 3
 5ae:	90 ff       	sbrs	r25, 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <LCD_write_char+0x36>
 5b2:	dd 9a       	sbi	0x1b, 5	; 27
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <LCD_write_char+0x38>
 5b6:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 5b8:	88 23       	and	r24, r24
 5ba:	14 f4       	brge	.+4      	; 0x5c0 <LCD_write_char+0x40>
 5bc:	de 9a       	sbi	0x1b, 6	; 27
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <LCD_write_char+0x42>
 5c0:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 5c2:	da 9a       	sbi	0x1b, 2	; 27
 5c4:	ef e9       	ldi	r30, 0x9F	; 159
 5c6:	ff e0       	ldi	r31, 0x0F	; 15
 5c8:	31 97       	sbiw	r30, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_write_char+0x48>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_write_char+0x4e>
 5ce:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 5d0:	da 98       	cbi	0x1b, 2	; 27
 5d2:	ef e9       	ldi	r30, 0x9F	; 159
 5d4:	ff e0       	ldi	r31, 0x0F	; 15
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <LCD_write_char+0x56>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <LCD_write_char+0x5c>
 5dc:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 5de:	80 ff       	sbrs	r24, 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <LCD_write_char+0x66>
 5e2:	db 9a       	sbi	0x1b, 3	; 27
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <LCD_write_char+0x68>
 5e6:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 5e8:	98 2f       	mov	r25, r24
 5ea:	96 95       	lsr	r25
 5ec:	90 ff       	sbrs	r25, 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <LCD_write_char+0x74>
 5f0:	dc 9a       	sbi	0x1b, 4	; 27
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <LCD_write_char+0x76>
 5f4:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 5f6:	98 2f       	mov	r25, r24
 5f8:	96 95       	lsr	r25
 5fa:	96 95       	lsr	r25
 5fc:	90 ff       	sbrs	r25, 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <LCD_write_char+0x84>
 600:	dd 9a       	sbi	0x1b, 5	; 27
 602:	01 c0       	rjmp	.+2      	; 0x606 <LCD_write_char+0x86>
 604:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 606:	86 95       	lsr	r24
 608:	86 95       	lsr	r24
 60a:	86 95       	lsr	r24
 60c:	80 ff       	sbrs	r24, 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <LCD_write_char+0x94>
 610:	de 9a       	sbi	0x1b, 6	; 27
 612:	01 c0       	rjmp	.+2      	; 0x616 <LCD_write_char+0x96>
 614:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 616:	da 9a       	sbi	0x1b, 2	; 27
 618:	8f e9       	ldi	r24, 0x9F	; 159
 61a:	9f e0       	ldi	r25, 0x0F	; 15
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_write_char+0x9c>
 620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_write_char+0xa2>
 622:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 624:	da 98       	cbi	0x1b, 2	; 27
 626:	ef e9       	ldi	r30, 0x9F	; 159
 628:	ff e0       	ldi	r31, 0x0F	; 15
 62a:	31 97       	sbiw	r30, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_write_char+0xaa>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_write_char+0xb0>
 630:	00 00       	nop
	 _delay_ms(1);
}
 632:	08 95       	ret

00000634 <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 63c:	fc 01       	movw	r30, r24
 63e:	80 81       	ld	r24, Z
 640:	88 23       	and	r24, r24
 642:	51 f0       	breq	.+20     	; 0x658 <LCD_write_string+0x24>
 644:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 646:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 64a:	cf 5f       	subi	r28, 0xFF	; 255
 64c:	f8 01       	movw	r30, r16
 64e:	ec 0f       	add	r30, r28
 650:	f1 1d       	adc	r31, r1
 652:	80 81       	ld	r24, Z
 654:	88 23       	and	r24, r24
 656:	b9 f7       	brne	.-18     	; 0x646 <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	08 95       	ret

00000660 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 660:	8f 92       	push	r8
 662:	9f 92       	push	r9
 664:	af 92       	push	r10
 666:	bf 92       	push	r11
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	2a 97       	sbiw	r28, 0x0a	; 10
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
 682:	dc 01       	movw	r26, r24
 684:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 686:	ae 01       	movw	r20, r28
 688:	4f 5f       	subi	r20, 0xFF	; 255
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	2a e0       	ldi	r18, 0x0A	; 10
 68e:	fa 01       	movw	r30, r20
 690:	11 92       	st	Z+, r1
 692:	2a 95       	dec	r18
 694:	e9 f7       	brne	.-6      	; 0x690 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	a1 05       	cpc	r26, r1
 69a:	b1 05       	cpc	r27, r1
 69c:	21 f4       	brne	.+8      	; 0x6a6 <LCD_write_num+0x46>
	LCD_write_char('0');
 69e:	80 e3       	ldi	r24, 0x30	; 48
 6a0:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_write_char>
	return;
 6a4:	38 c0       	rjmp	.+112    	; 0x716 <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 6a6:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 6a8:	0f 2e       	mov	r0, r31
 6aa:	fa e0       	ldi	r31, 0x0A	; 10
 6ac:	8f 2e       	mov	r8, r31
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	9f 2e       	mov	r9, r31
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	af 2e       	mov	r10, r31
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	bf 2e       	mov	r11, r31
 6ba:	f0 2d       	mov	r31, r0
 6bc:	e1 2e       	mov	r14, r17
 6be:	ff 24       	eor	r15, r15
 6c0:	e7 fc       	sbrc	r14, 7
 6c2:	f0 94       	com	r15
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	2c 0f       	add	r18, r28
 6ca:	3d 1f       	adc	r19, r29
 6cc:	e2 0e       	add	r14, r18
 6ce:	f3 1e       	adc	r15, r19
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	a5 01       	movw	r20, r10
 6d6:	94 01       	movw	r18, r8
 6d8:	0e 94 ab 03 	call	0x756	; 0x756 <__udivmodsi4>
 6dc:	60 5d       	subi	r22, 0xD0	; 208
 6de:	f7 01       	movw	r30, r14
 6e0:	60 83       	st	Z, r22
	num = num  / 10 ;
 6e2:	82 2f       	mov	r24, r18
 6e4:	93 2f       	mov	r25, r19
 6e6:	a4 2f       	mov	r26, r20
 6e8:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 6ea:	1f 5f       	subi	r17, 0xFF	; 255
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	a1 05       	cpc	r26, r1
 6f0:	b1 05       	cpc	r27, r1
 6f2:	21 f7       	brne	.-56     	; 0x6bc <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 6f4:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 6f6:	7a f0       	brmi	.+30     	; 0x716 <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 6f8:	e1 2f       	mov	r30, r17
 6fa:	ff 27       	eor	r31, r31
 6fc:	e7 fd       	sbrc	r30, 7
 6fe:	f0 95       	com	r31
 700:	21 e0       	ldi	r18, 0x01	; 1
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	2c 0f       	add	r18, r28
 706:	3d 1f       	adc	r19, r29
 708:	e2 0f       	add	r30, r18
 70a:	f3 1f       	adc	r31, r19
 70c:	80 81       	ld	r24, Z
 70e:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_write_char>
	i--;
 712:	11 50       	subi	r17, 0x01	; 1
 714:	88 f7       	brcc	.-30     	; 0x6f8 <LCD_write_num+0x98>
}
 716:	2a 96       	adiw	r28, 0x0a	; 10
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	ff 90       	pop	r15
 72a:	ef 90       	pop	r14
 72c:	bf 90       	pop	r11
 72e:	af 90       	pop	r10
 730:	9f 90       	pop	r9
 732:	8f 90       	pop	r8
 734:	08 95       	ret

00000736 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 736:	85 e8       	ldi	r24, 0x85	; 133
 738:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK,TOIE0);
 73a:	89 b7       	in	r24, 0x39	; 57
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	89 bf       	out	0x39, r24	; 57
	sei();
 740:	78 94       	sei
}
 742:	08 95       	ret

00000744 <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 744:	8d e8       	ldi	r24, 0x8D	; 141
 746:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 748:	88 ec       	ldi	r24, 0xC8	; 200
 74a:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 74c:	89 b7       	in	r24, 0x39	; 57
 74e:	82 60       	ori	r24, 0x02	; 2
 750:	89 bf       	out	0x39, r24	; 57
	sei();
 752:	78 94       	sei
 754:	08 95       	ret

00000756 <__udivmodsi4>:
 756:	a1 e2       	ldi	r26, 0x21	; 33
 758:	1a 2e       	mov	r1, r26
 75a:	aa 1b       	sub	r26, r26
 75c:	bb 1b       	sub	r27, r27
 75e:	fd 01       	movw	r30, r26
 760:	0d c0       	rjmp	.+26     	; 0x77c <__udivmodsi4_ep>

00000762 <__udivmodsi4_loop>:
 762:	aa 1f       	adc	r26, r26
 764:	bb 1f       	adc	r27, r27
 766:	ee 1f       	adc	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	a2 17       	cp	r26, r18
 76c:	b3 07       	cpc	r27, r19
 76e:	e4 07       	cpc	r30, r20
 770:	f5 07       	cpc	r31, r21
 772:	20 f0       	brcs	.+8      	; 0x77c <__udivmodsi4_ep>
 774:	a2 1b       	sub	r26, r18
 776:	b3 0b       	sbc	r27, r19
 778:	e4 0b       	sbc	r30, r20
 77a:	f5 0b       	sbc	r31, r21

0000077c <__udivmodsi4_ep>:
 77c:	66 1f       	adc	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	1a 94       	dec	r1
 786:	69 f7       	brne	.-38     	; 0x762 <__udivmodsi4_loop>
 788:	60 95       	com	r22
 78a:	70 95       	com	r23
 78c:	80 95       	com	r24
 78e:	90 95       	com	r25
 790:	9b 01       	movw	r18, r22
 792:	ac 01       	movw	r20, r24
 794:	bd 01       	movw	r22, r26
 796:	cf 01       	movw	r24, r30
 798:	08 95       	ret

0000079a <_exit>:
 79a:	f8 94       	cli

0000079c <__stop_program>:
 79c:	ff cf       	rjmp	.-2      	; 0x79c <__stop_program>
